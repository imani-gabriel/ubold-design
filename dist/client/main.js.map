{
  "version": 3,
  "sources": ["../../src/public/js/modules/DataProcessor.js", "../../src/public/js/modules/IndexedDBEngine.js", "../../src/public/js/modules/choleraDataSync.js", "../../src/public/js/main.js"],
  "sourcesContent": ["const _ = window._;\r\n\r\nexport default class DataProcessor {\r\n  constructor(data) {\r\n    this.data = data;\r\n  }\r\n\r\n  // S\u00E9lectionner les donn\u00E9es qui satisfont plusieurs conditions\r\n  selectWhere(conditions) {\r\n    if (!conditions || Object.keys(conditions).length === 0) {\r\n      // Aucun filtre : retourne tout\r\n      return this.data;\r\n    }\r\n    return _.filter(this.data, item => {\r\n      return Object.keys(conditions).every(key => item[key] === conditions[key]);\r\n    });\r\n  }\r\n\r\n  // Projeter (s\u00E9lectionner) uniquement les colonnes sp\u00E9cifi\u00E9es\r\n  projectColumns(columns) {\r\n    return _.map(this.data, item => _.pick(item, columns)); // Utilise _.pick pour projeter des colonnes\r\n  }\r\n\r\n  // Regrouper par plusieurs cl\u00E9s et calculer la somme de y\r\n  groupByAndSum(keys, sumColumn) {\r\n    let groupedData = _.groupBy(this.data, item => {\r\n      // Cr\u00E9er une cl\u00E9 composite en combinant plusieurs cl\u00E9s\r\n      return keys.map(key => item[key]).join('_'); // Exemple : `x_ver`\r\n    });\r\n\r\n    return _.map(groupedData, (items, value) => {\r\n      const groupKeys = value.split('_');\r\n      return {\r\n        x: groupKeys[0],\r\n        sumRes: _.sumBy(items, sumColumn) // Calculer la somme de la colonne sp\u00E9cifi\u00E9e (ici 'y')\r\n      };\r\n    });\r\n  }\r\n}\r\n\r\n", "/**\n * Classe pour g\u00E9rer le stockage dans IndexedDB.\n * Fournit des m\u00E9thodes pour cr\u00E9er, lire, mettre \u00E0 jour et supprimer des \u00E9l\u00E9ments.\n *\n * @class IndexedDBEngine\n */\nexport default class IndexedDBEngine {\n    constructor(dbName, storeName) {\n        this.dbName = dbName;\n        this.storeName = storeName;\n    }\n\n    /**\n     * Ouvre la base de donn\u00E9es IndexedDB.\n     * @returns {Promise<IDBDatabase>}\n     */\n    openDB() {\n        return new Promise((resolve, reject) => {\n            const request = indexedDB.open(this.dbName, 1);\n\n            request.onupgradeneeded = (event) => {\n                const db = event.target.result;\n                if (!db.objectStoreNames.contains(this.storeName)) {\n                    db.createObjectStore(this.storeName, { keyPath: 'id', autoIncrement: true });\n                }\n            };\n\n            request.onsuccess = (event) => {\n                resolve(event.target.result);\n            };\n\n            request.onerror = (event) => {\n                reject(event.target.error);\n            };\n        });\n    }\n\n    /**\n     * Ajoute un \u00E9l\u00E9ment \u00E0 la base de donn\u00E9es.\n     * @param {Object} data - Les donn\u00E9es \u00E0 ajouter.\n     * @returns {Promise<number>} - L'ID de l'\u00E9l\u00E9ment ajout\u00E9.\n     */\n    addItem(data) {\n        return this.openDB().then(db => {\n            return new Promise((resolve, reject) => {\n                const transaction = db.transaction([this.storeName], 'readwrite');\n                const store = transaction.objectStore(this.storeName);\n                const request = store.add(data);\n\n                request.onsuccess = () => {\n                    resolve(request.result);\n                };\n\n                request.onerror = () => {\n                    reject(request.error);\n                };\n            });\n        });\n    }\n\n    /**\n     * R\u00E9cup\u00E8re tous les \u00E9l\u00E9ments de la base de donn\u00E9es.\n     * @returns {Promise<Array>} - Un tableau d'\u00E9l\u00E9ments.\n     */\n    getAllItems() {\n        return this.openDB().then(db => {\n            return new Promise((resolve, reject) => {\n                const transaction = db.transaction([this.storeName], 'readonly');\n                const store = transaction.objectStore(this.storeName);\n                const request = store.getAll();\n\n                request.onsuccess = () => {\n                    resolve(request.result);\n                };\n\n                request.onerror = () => {\n                    reject(request.error);\n                };\n            });\n        });\n    }\n\n    /**\n     * Supprime un \u00E9l\u00E9ment de la base de donn\u00E9es par son ID.\n     * @param {number} id - L'ID de l'\u00E9l\u00E9ment \u00E0 supprimer.\n     * @returns {Promise<void>}\n     */\n    deleteItem(id) {\n        return this.openDB().then(db => {\n            return new Promise((resolve, reject) => {\n                const transaction = db.transaction([this.storeName], 'readwrite');\n                const store = transaction.objectStore(this.storeName);\n                const request = store.delete(id);\n\n                request.onsuccess = () => {\n                    resolve();\n                };\n\n                request.onerror = () => {\n                    reject(request.error);\n                };\n            });\n        });\n    }\n}\n", "import IndexedDBEngine from './IndexedDBEngine.js';\n\nconst CHOLERA_STORE_NAME = 'choleraData';\nconst DB_NAME = 'observaDB';\n\nclass CholeraDataSync {\n    constructor() {\n        this.dbEngine = new IndexedDBEngine(DB_NAME, CHOLERA_STORE_NAME);\n    }\n\n    /**\n     * V\u00E9rifie si des donn\u00E9es chol\u00E9ra existent dans IndexedDB\n     * @returns {Promise<boolean>} true si des donn\u00E9es existent, false sinon\n     */\n    async checkCholeraDataExists() {\n        try {\n            const count = await this.dbEngine.getCount();\n            return count > 0;\n        } catch (error) {\n            console.error('Erreur lors de la v\u00E9rification des donn\u00E9es chol\u00E9ra:', error);\n            return false;\n        }\n    }\n\n    /**\n     * R\u00E9cup\u00E8re les donn\u00E9es du chol\u00E9ra depuis l'API MongoDB\n     * @returns {Promise<Array>} Les donn\u00E9es du chol\u00E9ra\n     */\n    async fetchCholeraDataFromMongo() {\n        try {\n            const response = await fetch('/api/cholera');\n            if (!response.ok) {\n                throw new Error(`Erreur HTTP: ${response.status}`);\n            }\n            return await response.json();\n        } catch (error) {\n            console.error('Erreur lors de la r\u00E9cup\u00E9ration des donn\u00E9es depuis MongoDB:', error);\n            throw error;\n        }\n    }\n\n    /**\n     * Synchronise les donn\u00E9es du chol\u00E9ra depuis MongoDB vers IndexedDB\n     */\n    async syncCholeraData() {\n        try {\n            console.log('D\u00E9but de la synchronisation des donn\u00E9es chol\u00E9ra...');\n            \n            // V\u00E9rifier si des donn\u00E9es existent d\u00E9j\u00E0\n            const hasData = await this.checkCholeraDataExists();\n            \n            if (!hasData) {\n                console.log('Aucune donn\u00E9e chol\u00E9ra trouv\u00E9e dans IndexedDB. T\u00E9l\u00E9chargement depuis MongoDB...');\n                \n                // R\u00E9cup\u00E9rer les donn\u00E9es depuis MongoDB\n                const choleraData = await this.fetchCholeraDataFromMongo();\n                \n                if (choleraData && choleraData.length > 0) {\n                    // Stocker les donn\u00E9es dans IndexedDB\n                    for (const item of choleraData) {\n                        await this.dbEngine.addItem(item);\n                    }\n                    console.log(`Synchronisation termin\u00E9e. ${choleraData.length} enregistrements ajout\u00E9s \u00E0 IndexedDB.`);\n                    return true;\n                } else {\n                    console.log('Aucune donn\u00E9e chol\u00E9ra disponible dans MongoDB.');\n                    return false;\n                }\n            } else {\n                console.log('Les donn\u00E9es chol\u00E9ra sont d\u00E9j\u00E0 \u00E0 jour dans IndexedDB.');\n                return true;\n            }\n        } catch (error) {\n            console.error('Erreur lors de la synchronisation des donn\u00E9es chol\u00E9ra:', error);\n            return false;\n        }\n    }\n\n    /**\n     * R\u00E9cup\u00E8re toutes les donn\u00E9es du chol\u00E9ra depuis IndexedDB\n     * @returns {Promise<Array>} Les donn\u00E9es du chol\u00E9ra\n     */\n    async getAllCholeraData() {\n        try {\n            return await this.dbEngine.getAllItems();\n        } catch (error) {\n            console.error('Erreur lors de la r\u00E9cup\u00E9ration des donn\u00E9es chol\u00E9ra:', error);\n            throw error;\n        }\n    }\n}\n\n// Exporter une instance unique\nconst choleraDataSync = new CholeraDataSync();\nexport default choleraDataSync;\n", "// Importations des modules\nimport FormEngin from \"./modules/FormEngin.js\";\nimport DataProcessor from \"./modules/DataProcessor.js\";\nimport IndexedDBEngine from \"./modules/IndexedDBEngine.js\";\nimport choleraDataSync from \"./modules/choleraDataSync.js\";\n\n// Variables globales\nlet dataSetAnalyze = null;\nlet allProvinces = [];\nlet provinceLayers = {};\nlet highlightedProvince = null;\nlet highlightedTerritory = null;\nlet isSearchInitialized = false;\nlet healthZonesLayer = null; // Pour stocker la couche des zones de sant\u00E9\nlet choleraData = null; // Pour stocker les donn\u00E9es du chol\u00E9ra\nlet searchIndex = {}; // Index de recherche pour la concordance des donn\u00E9es\nlet zonesData = null; // Pour stocker les donn\u00E9es des zones de sant\u00E9\nlet choleraStatistics = {}; // Pour stocker les statistiques du chol\u00E9ra\nlet colorScales = {}; // Pour stocker les \u00E9chelles de couleurs\nlet choleraMarkers = L.layerGroup(); // Pour les marqueurs de d\u00E9c\u00E8s\n\n// Fonction pour charger les zones de sant\u00E9 imm\u00E9diatement\nasync function loadZonesData() {\n    try {\n        console.log('Chargement des zones de sant\u00E9...');\n        const response = await d3.json('./lib/leaflet/zoneSante.geojson');\n        zonesData = response;\n        console.log('Zones de sant\u00E9 charg\u00E9es:', zonesData.features.length, 'zones');\n        \n        // Cr\u00E9er un index de recherche rapide pour les zones\n        if (!searchIndex.zones) {\n            searchIndex.zones = new Set();\n            searchIndex.zoneData = {};\n        }\n        \n        // Indexer les zones de sant\u00E9\n        zonesData.features.forEach(feature => {\n            const props = feature.properties;\n            if (props.ZoneDeSante) {\n                searchIndex.zones.add(props.ZoneDeSante);\n                searchIndex.zoneData[props.ZoneDeSante] = {\n                    dps: props.DPS,\n                    territoire: props.TERRITOIRE,\n                    zone: props.ZoneDeSante,\n                    pcode: props.Pcode,\n                    feature: feature\n                };\n            }\n        });\n        \n        console.log('Index des zones cr\u00E9\u00E9:', searchIndex.zones.size, 'zones index\u00E9es');\n        \n        // Ajouter les zones de sant\u00E9 \u00E0 la carte\n        addZonesToMap();\n        \n        // Charger la couche des cours d'eau juste apr\u00E8s\n        await loadCoursEauLayer();\n        \n        // R\u00E9initialiser la recherche si elle est d\u00E9j\u00E0 initialis\u00E9e\n        const searchInput = document.getElementById('search-motif');\n        if (searchInput && searchInput.value.trim()) {\n            searchInput.dispatchEvent(new Event('input'));\n        }\n        \n    } catch (error) {\n        console.error('Erreur lors du chargement des zones de sant\u00E9:', error);\n    }\n}\n\n// Fonction pour ajouter les zones de sant\u00E9 \u00E0 la carte\nfunction addZonesToMap() {\n    if (!zonesData || !map) {\n        console.log('Donn\u00E9es ou carte non disponibles pour ajouter les zones');\n        return;\n    }\n    \n    console.log('Ajout des zones de sant\u00E9 \u00E0 la carte...');\n    \n    // Cr\u00E9er la couche des zones de sant\u00E9\n    const zonesLayer = L.geoJSON(zonesData, {\n        style: function(feature) {\n            return {\n                weight: 1,\n                opacity: 0.8,\n                color: '#666', // Gris pour les contours\n                fillColor: '#f0f0f0', // Gris tr\u00E8s p\u00E2le pour le fond\n                fillOpacity: 0.3\n            };\n        },\n        onEachFeature: function(feature, layer) {\n            const props = feature.properties;\n            \n            // Infobulle au survol\n            if (props.ZoneDeSante) {\n                layer.bindTooltip(`\n                    <div style=\"font-weight: bold;\">${props.ZoneDeSante}</div>\n                    <div>DPS: ${props.DPS || 'N/A'}</div>\n                    <div>Territoire: ${props.TERRITOIRE || 'N/A'}</div>\n                `, {\n                    permanent: false,\n                    direction: 'center',\n                    className: 'zone-tooltip'\n                });\n            }\n            \n            // D\u00E9sactiver le changement de style au survol et au clic\n            layer.on({\n                click: function() {\n                    // Afficher uniquement les informations, ne pas modifier la coloration ni zoomer\n                    displayZoneInfo({\n                        type: 'Zone de Sant\u00E9',\n                        name: props.ZoneDeSante,\n                        displayName: props.ZoneDeSante,\n                        category: 'Zone de Sant\u00E9',\n                        dps: props.DPS,\n                        territoire: props.TERRITOIRE,\n                        feature: feature\n                    });\n                }\n            });\n        }\n    });\n    \n    // Ajouter la couche \u00E0 la carte\n    zonesLayer.addTo(map);\n    \n    // Stocker la r\u00E9f\u00E9rence pour pouvoir la manipuler plus tard\n    window.zonesLayer = zonesLayer;\n    \n    console.log('Zones de sant\u00E9 ajout\u00E9es \u00E0 la carte');\n}\n\n// Fonction pour effectuer une recherche compl\u00E8te\nfunction searchInAllData(query) {\n    if (!query || query.trim().length < 2) return [];\n    \n    const searchTerm = query.toLowerCase().trim();\n    const results = [];\n    \n    // Rechercher dans les zones de sant\u00E9\n    if (searchIndex.zones) {\n        searchIndex.zones.forEach(zoneName => {\n            if (zoneName.toLowerCase().includes(searchTerm)) {\n                const zoneData = searchIndex.zoneData[zoneName];\n                results.push({\n                    name: zoneName,\n                    displayName: zoneName,\n                    type: 'Zone de Sant\u00E9',\n                    category: 'Zone de Sant\u00E9',\n                    dps: zoneData?.dps,\n                    territoire: zoneData?.territoire,\n                    feature: zoneData?.feature\n                });\n            }\n        });\n    }\n    \n    // Rechercher dans les DPS\n    if (searchIndex.dps) {\n        searchIndex.dps.forEach(dpsName => {\n            if (dpsName.toLowerCase().includes(searchTerm)) {\n                results.push({\n                    name: dpsName,\n                    displayName: dpsName,\n                    type: 'DPS',\n                    category: 'DPS'\n                });\n            }\n        });\n    }\n    \n    // Rechercher dans les provinces\n    if (searchIndex.provinces) {\n        searchIndex.provinces.forEach(provinceName => {\n            if (provinceName.toLowerCase().includes(searchTerm)) {\n                results.push({\n                    name: provinceName,\n                    displayName: provinceName,\n                    type: 'Province',\n                    category: 'Province'\n                });\n            }\n        });\n    }\n    \n    // Limiter les r\u00E9sultats et les trier par pertinence\n    return results.slice(0, 10).sort((a, b) => {\n        // Prioriser les correspondances exactes\n        const aExact = a.name.toLowerCase() === searchTerm;\n        const bExact = b.name.toLowerCase() === searchTerm;\n        if (aExact && !bExact) return -1;\n        if (!aExact && bExact) return 1;\n        \n        // Puis par type (Zone > DPS > Province)\n        const typeOrder = { 'Zone de Sant\u00E9': 1, 'DPS': 2, 'Province': 3 };\n        return typeOrder[a.type] - typeOrder[b.type];\n    });\n}\n\n// Fonction pour mettre en \u00E9vidence une zone sur la carte\nfunction highlightZoneOnMap(searchResult) {\n    // Ne rien faire pour la coloration ni le zoom\n    // Afficher uniquement les informations\n    displayZoneInfo(searchResult);\n}\n\n// Fonction pour afficher les informations d'une zone\nfunction displayZoneInfo(searchResult) {\n    const infoDiv = document.getElementById('province-info');\n    if (!infoDiv) return;\n    \n    if (searchResult.type === 'Zone de Sant\u00E9') {\n        // Essayer d'abord avec l'index de recherche avanc\u00E9\n        let zoneInfo = null;\n        let choleraStats = null;\n        \n        if (searchIndex && searchIndex.zoneData) {\n            zoneInfo = searchIndex.zoneData[searchResult.name];\n            choleraStats = zoneInfo?.choleraData || null;\n        }\n        \n        // Si pas d'index avanc\u00E9, utiliser les donn\u00E9es de base\n        if (!zoneInfo && searchResult.feature) {\n            const props = searchResult.feature.properties;\n            zoneInfo = {\n                dps: props.DPS,\n                territoire: props.TERRITOIRE,\n                zone: props.ZoneDeSante\n            };\n        }\n        \n        // Chercher dans les statistiques du chol\u00E9ra\n        if (!choleraStats && choleraStatistics && choleraStatistics.zones) {\n            choleraStats = choleraStatistics.zones[searchResult.name];\n        }\n        \n        let choleraInfo = '';\n        if (choleraStats) {\n            const tauxMortalite = choleraStats.totalCas > 0 ? ((choleraStats.totalDeces / choleraStats.totalCas) * 100).toFixed(2) : 0;\n            const tauxIncidence = choleraStats.totalPop > 0 ? ((choleraStats.totalCas / choleraStats.totalPop) * 100000).toFixed(2) : 0;\n            \n            choleraInfo = `\n                <div class=\"mt-3 p-3 bg-light rounded border\">\n                    <h6 class=\"text-primary mb-3\">\uD83D\uDCCA Statistiques Chol\u00E9ra (${choleraStats.anneesCount} ann\u00E9es)</h6>\n                    <div class=\"row\">\n                        <div class=\"col-6\">\n                            <div class=\"text-center p-2 bg-danger text-white rounded mb-2\">\n                                <strong>${choleraStats.totalCas.toLocaleString()}</strong>\n                                <div class=\"small\">Total Cas</div>\n                            </div>\n                        </div>\n                        <div class=\"col-6\">\n                            <div class=\"text-center p-2 bg-dark text-white rounded mb-2\">\n                                <strong>${choleraStats.totalDeces.toLocaleString()}</strong>\n                                <div class=\"small\">Total D\u00E9c\u00E8s</div>\n                            </div>\n                        </div>\n                    </div>\n                    <div class=\"row\">\n                        <div class=\"col-6\">\n                            <div class=\"text-center p-2 bg-warning text-dark rounded mb-2\">\n                                <strong>${tauxMortalite}%</strong>\n                                <div class=\"small\">Taux Mortalit\u00E9</div>\n                            </div>\n                        </div>\n                        <div class=\"col-6\">\n                            <div class=\"text-center p-2 bg-info text-white rounded mb-2\">\n                                <strong>${tauxIncidence}</strong>\n                                <div class=\"small\">Incidence/100k</div>\n                            </div>\n                        </div>\n                    </div>\n                    <div class=\"mt-2\">\n                        <small class=\"text-muted\">\n                            <strong>Population:</strong> ${choleraStats.totalPop.toLocaleString()}<br>\n                            <strong>P\u00E9riode:</strong> ${choleraStats.annees[0]} - ${choleraStats.annees[choleraStats.annees.length - 1]}\n                        </small>\n                    </div>\n                </div>\n            `;\n        } else {\n            choleraInfo = `\n                <div class=\"mt-3 p-3 bg-light rounded border\">\n                    <h6 class=\"text-muted\">\uD83D\uDCCA Statistiques Chol\u00E9ra</h6>\n                    <p class=\"text-muted mb-0\">Aucune donn\u00E9e disponible pour cette zone</p>\n                </div>\n            `;\n        }\n        \n        infoDiv.innerHTML = `\n            <h5 class=\"border-bottom pb-2 mb-2\">\uD83C\uDFE5 ${searchResult.name}</h5>\n            <p><strong>Type:</strong> ${searchResult.category}</p>\n            <p><strong>DPS:</strong> ${zoneInfo?.dps || searchResult.dps || 'Non disponible'}</p>\n            <p><strong>Province:</strong> ${zoneInfo?.province || searchResult.province || 'Non disponible'}</p>\n            ${choleraInfo}\n        `;\n    } else if (searchResult.type === 'DPS') {\n        // Afficher les statistiques du DPS\n        let dpsStats = null;\n        if (choleraStatistics && choleraStatistics.dps) {\n            dpsStats = choleraStatistics.dps[searchResult.name];\n        }\n        \n        let choleraInfo = '';\n        if (dpsStats) {\n            const tauxMortalite = dpsStats.totalCas > 0 ? ((dpsStats.totalDeces / dpsStats.totalCas) * 100).toFixed(2) : 0;\n            const tauxIncidence = dpsStats.totalPop > 0 ? ((dpsStats.totalCas / dpsStats.totalPop) * 100000).toFixed(2) : 0;\n            \n            choleraInfo = `\n                <div class=\"mt-3 p-3 bg-light rounded border\">\n                    <h6 class=\"text-primary mb-3\">\uD83D\uDCCA Statistiques DPS (${dpsStats.anneesCount} ann\u00E9es)</h6>\n                    <div class=\"row\">\n                        <div class=\"col-6\">\n                            <div class=\"text-center p-2 bg-danger text-white rounded mb-2\">\n                                <strong>${dpsStats.totalCas.toLocaleString()}</strong>\n                                <div class=\"small\">Total Cas</div>\n                            </div>\n                        </div>\n                        <div class=\"col-6\">\n                            <div class=\"text-center p-2 bg-dark text-white rounded mb-2\">\n                                <strong>${dpsStats.totalDeces.toLocaleString()}</strong>\n                                <div class=\"small\">Total D\u00E9c\u00E8s</div>\n                            </div>\n                        </div>\n                    </div>\n                    <div class=\"row\">\n                        <div class=\"col-6\">\n                            <div class=\"text-center p-2 bg-warning text-dark rounded mb-2\">\n                                <strong>${tauxMortalite}%</strong>\n                                <div class=\"small\">Taux Mortalit\u00E9</div>\n                            </div>\n                        </div>\n                        <div class=\"col-6\">\n                            <div class=\"text-center p-2 bg-info text-white rounded mb-2\">\n                                <strong>${tauxIncidence}</strong>\n                                <div class=\"small\">Incidence/100k</div>\n                            </div>\n                        </div>\n                    </div>\n                    <div class=\"mt-2\">\n                        <small class=\"text-muted\">\n                            <strong>Zones de sant\u00E9:</strong> ${dpsStats.zonesCount}<br>\n                            <strong>Population:</strong> ${dpsStats.totalPop.toLocaleString()}<br>\n                            <strong>P\u00E9riode:</strong> ${dpsStats.annees[0]} - ${dpsStats.annees[dpsStats.annees.length - 1]}\n                        </small>\n                    </div>\n                </div>\n            `;\n        } else {\n            choleraInfo = `\n                <div class=\"mt-3 p-3 bg-light rounded border\">\n                    <h6 class=\"text-muted\">\uD83D\uDCCA Statistiques DPS</h6>\n                    <p class=\"text-muted mb-0\">Aucune donn\u00E9e disponible pour ce DPS</p>\n                </div>\n            `;\n        }\n        \n        infoDiv.innerHTML = `\n            <h5 class=\"border-bottom pb-2 mb-2\">\uD83C\uDFDB\uFE0F ${searchResult.name}</h5>\n            <p><strong>Type:</strong> ${searchResult.category}</p>\n            ${choleraInfo}\n        `;\n    } else if (searchResult.type === 'Province') {\n        // Afficher les statistiques de la province\n        let provinceStats = null;\n        if (choleraStatistics && choleraStatistics.provinces) {\n            provinceStats = choleraStatistics.provinces[searchResult.name];\n        }\n        \n        let choleraInfo = '';\n        if (provinceStats) {\n            const tauxMortalite = provinceStats.totalCas > 0 ? ((provinceStats.totalDeces / provinceStats.totalCas) * 100).toFixed(2) : 0;\n            const tauxIncidence = provinceStats.totalPop > 0 ? ((provinceStats.totalCas / provinceStats.totalPop) * 100000).toFixed(2) : 0;\n            \n            choleraInfo = `\n                <div class=\"mt-3 p-3 bg-light rounded border\">\n                    <h6 class=\"text-primary mb-3\">\uD83D\uDCCA Statistiques Province (${provinceStats.anneesCount} ann\u00E9es)</h6>\n                    <div class=\"row\">\n                        <div class=\"col-6\">\n                            <div class=\"text-center p-2 bg-danger text-white rounded mb-2\">\n                                <strong>${provinceStats.totalCas.toLocaleString()}</strong>\n                                <div class=\"small\">Total Cas</div>\n                            </div>\n                        </div>\n                        <div class=\"col-6\">\n                            <div class=\"text-center p-2 bg-dark text-white rounded mb-2\">\n                                <strong>${provinceStats.totalDeces.toLocaleString()}</strong>\n                                <div class=\"small\">Total D\u00E9c\u00E8s</div>\n                            </div>\n                        </div>\n                    </div>\n                    <div class=\"row\">\n                        <div class=\"col-6\">\n                            <div class=\"text-center p-2 bg-warning text-dark rounded mb-2\">\n                                <strong>${tauxMortalite}%</strong>\n                                <div class=\"small\">Taux Mortalit\u00E9</div>\n                            </div>\n                        </div>\n                        <div class=\"col-6\">\n                            <div class=\"text-center p-2 bg-info text-white rounded mb-2\">\n                                <strong>${tauxIncidence}</strong>\n                                <div class=\"small\">Incidence/100k</div>\n                            </div>\n                        </div>\n                    </div>\n                    <div class=\"mt-2\">\n                        <small class=\"text-muted\">\n                            <strong>DPS:</strong> ${provinceStats.dpsCount}<br>\n                            <strong>Zones de sant\u00E9:</strong> ${provinceStats.zonesCount}<br>\n                            <strong>Population:</strong> ${provinceStats.totalPop.toLocaleString()}<br>\n                            <strong>P\u00E9riode:</strong> ${provinceStats.annees[0]} - ${provinceStats.annees[provinceStats.annees.length - 1]}\n                        </small>\n                    </div>\n                </div>\n            `;\n        } else {\n            choleraInfo = `\n                <div class=\"mt-3 p-3 bg-light rounded border\">\n                    <h6 class=\"text-muted\">\uD83D\uDCCA Statistiques Province</h6>\n                    <p class=\"text-muted mb-0\">Aucune donn\u00E9e disponible pour cette province</p>\n                </div>\n            `;\n        }\n        \n        infoDiv.innerHTML = `\n            <h5 class=\"border-bottom pb-2 mb-2\">\uD83D\uDDFA\uFE0F ${searchResult.name}</h5>\n            <p><strong>Type:</strong> ${searchResult.category}</p>\n            ${choleraInfo}\n        `;\n    } else {\n        // Pour les autres types (Territoire)\n        infoDiv.innerHTML = `\n            <h5 class=\"border-bottom pb-2 mb-2\">${searchResult.name}</h5>\n            <p><strong>Type:</strong> ${searchResult.category}</p>\n        `;\n    }\n}\n\n// Fonction pour charger et analyser les donn\u00E9es du chol\u00E9ra\nasync function loadCholeraData() {\n    try {\n        console.log('Chargement des donn\u00E9es du chol\u00E9ra...');\n        const response = await fetch('./docs/cholera-db.json');\n        choleraData = await response.json();\n        console.log('Donn\u00E9es du chol\u00E9ra charg\u00E9es:', choleraData.length, 'enregistrements');\n        // Calculer les statistiques\n        calculateCholeraStatistics();\n        // Remplir les selects multiples\n        if (typeof populateAdvancedFilterSelects === 'function') {\n            populateAdvancedFilterSelects();\n        }\n    } catch (error) {\n        console.error('Erreur lors du chargement des donn\u00E9es du chol\u00E9ra:', error);\n    }\n}\n\n// Fonction pour calculer les statistiques du chol\u00E9ra\nfunction calculateCholeraStatistics() {\n    if (!choleraData) return;\n    \n    console.log('Calcul des statistiques du chol\u00E9ra...');\n    \n    // Statistiques par zone de sant\u00E9\n    const zoneStats = {};\n    const dpsStats = {};\n    const provinceStats = {};\n    \n    choleraData.forEach(record => {\n        const zone = record.ZoneDeSante;\n        const dps = record.DPS;\n        const province = record.Province;\n        const cas = parseInt(record.Cas) || 0;\n        const deces = parseInt(record.Deces) || 0;\n        const pop = parseFloat(record.Pop) || 0;\n        const annee = parseInt(record.Annees) || 0;\n        \n        // Statistiques par zone de sant\u00E9\n        if (!zoneStats[zone]) {\n            zoneStats[zone] = {\n                totalCas: 0,\n                totalDeces: 0,\n                totalPop: 0,\n                annees: new Set(),\n                dps: dps,\n                province: province,\n                records: []\n            };\n        }\n        zoneStats[zone].totalCas += cas;\n        zoneStats[zone].totalDeces += deces;\n        zoneStats[zone].totalPop = Math.max(zoneStats[zone].totalPop, pop);\n        zoneStats[zone].annees.add(annee);\n        zoneStats[zone].records.push(record);\n        \n        // Statistiques par DPS\n        if (!dpsStats[dps]) {\n            dpsStats[dps] = {\n                totalCas: 0,\n                totalDeces: 0,\n                totalPop: 0,\n                zones: new Set(),\n                province: province,\n                annees: new Set()\n            };\n        }\n        dpsStats[dps].totalCas += cas;\n        dpsStats[dps].totalDeces += deces;\n        dpsStats[dps].totalPop = Math.max(dpsStats[dps].totalPop, pop);\n        dpsStats[dps].zones.add(zone);\n        dpsStats[dps].annees.add(annee);\n        \n        // Statistiques par province\n        if (!provinceStats[province]) {\n            provinceStats[province] = {\n                totalCas: 0,\n                totalDeces: 0,\n                totalPop: 0,\n                dps: new Set(),\n                zones: new Set(),\n                annees: new Set()\n            };\n        }\n        provinceStats[province].totalCas += cas;\n        provinceStats[province].totalDeces += deces;\n        provinceStats[province].totalPop = Math.max(provinceStats[province].totalPop, pop);\n        provinceStats[province].dps.add(dps);\n        provinceStats[province].zones.add(zone);\n        provinceStats[province].annees.add(annee);\n    });\n    \n    // Convertir les Sets en Arrays pour l'affichage\n    Object.keys(zoneStats).forEach(zone => {\n        zoneStats[zone].annees = Array.from(zoneStats[zone].annees).sort();\n        zoneStats[zone].anneesCount = zoneStats[zone].annees.length;\n    });\n    \n    Object.keys(dpsStats).forEach(dps => {\n        dpsStats[dps].zones = Array.from(dpsStats[dps].zones);\n        dpsStats[dps].annees = Array.from(dpsStats[dps].annees).sort();\n        dpsStats[dps].zonesCount = dpsStats[dps].zones.length;\n        dpsStats[dps].anneesCount = dpsStats[dps].annees.length;\n    });\n    \n    Object.keys(provinceStats).forEach(province => {\n        provinceStats[province].dps = Array.from(provinceStats[province].dps);\n        provinceStats[province].zones = Array.from(provinceStats[province].zones);\n        provinceStats[province].annees = Array.from(provinceStats[province].annees).sort();\n        provinceStats[province].dpsCount = provinceStats[province].dps.length;\n        provinceStats[province].zonesCount = provinceStats[province].zones.length;\n        provinceStats[province].anneesCount = provinceStats[province].annees.length;\n    });\n    \n    // Stocker les statistiques\n    choleraStatistics = {\n        zones: zoneStats,\n        dps: dpsStats,\n        provinces: provinceStats\n    };\n    \n    // Mettre \u00E0 jour l'index de recherche avec les donn\u00E9es du chol\u00E9ra\n    updateSearchIndexWithCholeraData();\n    \n    console.log('Statistiques calcul\u00E9es:', {\n        zones: Object.keys(zoneStats).length,\n        dps: Object.keys(dpsStats).length,\n        provinces: Object.keys(provinceStats).length\n    });\n}\n\n// Fonction pour mettre \u00E0 jour l'index de recherche avec les donn\u00E9es du chol\u00E9ra\nfunction updateSearchIndexWithCholeraData() {\n    if (!choleraStatistics) return;\n    \n    // Ajouter les donn\u00E9es du chol\u00E9ra \u00E0 l'index des zones\n    if (searchIndex.zoneData) {\n        Object.keys(choleraStatistics.zones).forEach(zoneName => {\n            if (searchIndex.zoneData[zoneName]) {\n                searchIndex.zoneData[zoneName].choleraData = choleraStatistics.zones[zoneName];\n            }\n        });\n    }\n    \n    // Cr\u00E9er un index de recherche pour les DPS et provinces\n    if (!searchIndex.dps) {\n        searchIndex.dps = new Set();\n        searchIndex.dpsData = {};\n    }\n    \n    if (!searchIndex.provinces) {\n        searchIndex.provinces = new Set();\n        searchIndex.provinceData = {};\n    }\n    \n    // Indexer les DPS\n    Object.keys(choleraStatistics.dps).forEach(dpsName => {\n        searchIndex.dps.add(dpsName);\n        searchIndex.dpsData[dpsName] = {\n            name: dpsName,\n            type: 'DPS',\n            category: 'DPS',\n            choleraData: choleraStatistics.dps[dpsName]\n        };\n    });\n    \n    // Indexer les provinces\n    Object.keys(choleraStatistics.provinces).forEach(provinceName => {\n        searchIndex.provinces.add(provinceName);\n        searchIndex.provinceData[provinceName] = {\n            name: provinceName,\n            type: 'Province',\n            category: 'Province',\n            choleraData: choleraStatistics.provinces[provinceName]\n        };\n    });\n    \n    // Cr\u00E9er les \u00E9chelles de couleurs\n    createColorScales();\n    \n    // Appliquer la coloration aux zones\n    applyCholeraColoring();\n    \n    console.log('Index de recherche mis \u00E0 jour avec les donn\u00E9es du chol\u00E9ra:', {\n        zones: searchIndex.zones ? searchIndex.zones.size : 0,\n        dps: searchIndex.dps.size,\n        provinces: searchIndex.provinces.size\n    });\n}\n\n// Fonction pour cr\u00E9er les \u00E9chelles de couleurs\nfunction createColorScales() {\n    if (!choleraStatistics || !choleraStatistics.zones) return;\n    \n    // R\u00E9cup\u00E9rer toutes les valeurs de cas et d\u00E9c\u00E8s\n    const allCas = Object.values(choleraStatistics.zones).map(zone => zone.totalCas);\n    const allDeces = Object.values(choleraStatistics.zones).map(zone => zone.totalDeces);\n    \n    const maxCas = Math.max(...allCas);\n    const maxDeces = Math.max(...allDeces);\n    \n    // \u00C9chelle de couleurs pour les cas (d\u00E9grad\u00E9 de jaune \u00E0 rouge)\n    colorScales.cas = d3.scaleSequential()\n        .domain([0, maxCas])\n        .interpolator(d3.interpolateYlOrRd);\n    \n    // \u00C9chelle de couleurs pour les d\u00E9c\u00E8s (d\u00E9grad\u00E9 de rouge clair \u00E0 rouge fonc\u00E9)\n    colorScales.deces = d3.scaleSequential()\n        .domain([0, maxDeces])\n        .interpolator(d3.interpolateReds);\n    \n    console.log('\u00C9chelles de couleurs cr\u00E9\u00E9es:', {\n        maxCas: maxCas,\n        maxDeces: maxDeces\n    });\n}\n\n\n// Fonction pour basculer l'affichage des zones de sant\u00E9\nfunction toggleHealthZones(show) {\n    if (show) {\n        // Si la couche n'existe pas, on la cr\u00E9e\n        if (!healthZonesLayer) {\n            healthZonesLayer = L.geoJSON(null, {\n                style: function(feature) {\n                    return {\n                        fillColor: '#ddd',\n                        weight: .25,\n                        opacity: 1,\n                        color: '#ff0000',\n                        fillOpacity: 0.3\n                    };\n                },\n                onEachFeature: function(feature, layer) {\n                    if (feature.properties && feature.properties.name) {\n                        layer.bindPopup(\"Zone de sant\u00E9: \" + feature.properties.name);\n                    }\n                }\n            }).addTo(map);\n            \n            // Charger les donn\u00E9es GeoJSON\n            fetch('./lib/leaflet/cours_eau.geojson')\n                .then(response => response.json())\n                .then(data => {\n                    healthZonesLayer.addData(data);\n                    // Ajuster la vue pour afficher toutes les zones de sant\u00E9\n                    map.fitBounds(healthZonesLayer.getBounds());\n                })\n                .catch(error => {\n                    console.error('Erreur lors du chargement des zones de sant\u00E9:', error);\n                });\n        }\n    } else {\n        // Supprimer la couche des zones de sant\u00E9 si elle existe\n        if (healthZonesLayer) {\n            map.removeLayer(healthZonesLayer);\n            healthZonesLayer = null;toggle-cours-eau\n        }\n    }\n}\n\n// Gestionnaire d'\u00E9v\u00E9nement pour la case \u00E0 cocher\n$(document).on('change', '#toggle-cours-eaukk', function() {\n    toggleHealthZones($(this).is(':checked'));\n});\n// Fonctions utilitaires pour la couleur des cas et la taille des d\u00E9c\u00E8s\nfunction getCaseColorOrange(cas) {\n    // Orange clair \u00E0 fonc\u00E9\n    return cas > 1000 ? '#FF8C00' :\n           cas > 500  ? '#FFA500' :\n           cas > 100  ? '#FFD580' :\n                         '#FFF2CC';\n}\nfunction getDeathRadius(deces) {\n    return deces > 50 ? 16 :\n           deces > 20 ? 10 :\n           deces > 5  ? 6 :\n                         3;\n}\n\n// Fonction pour appliquer la coloration aux zones de sant\u00E9\nfunction applyCholeraColoring() {\n    if (!window.zonesLayer) return;\n    // R\u00E9initialiser les marqueurs\n    if (map.hasLayer(choleraMarkers)) {\n        map.removeLayer(choleraMarkers);\n    }\n    choleraMarkers = L.layerGroup();\n\n    window.zonesLayer.eachLayer(layer => {\n        if (layer.feature && layer.feature.properties) {\n            const props = layer.feature.properties;\n            const zoneName = props.ZoneDeSante;\n            if (zoneName && choleraStatistics.zones[zoneName]) {\n                const zoneStats = choleraStatistics.zones[zoneName];\n                // SUPPRIMER la coloration des polygones : ne rien faire ici\n                // Afficher uniquement les cercles cas et d\u00E9c\u00E8s\n                // Cercle de cas : taille variable selon la valeur, couleur orange\n                if (zoneStats.totalCas > 0) {\n                    const center = layer.getBounds().getCenter();\n                    const radiusCas = Math.max(5, Math.min(20, zoneStats.totalCas / 50));\n                    const casMarker = L.circleMarker(center, {\n                        radius: radiusCas,\n                        fillColor: '#FFA500', // orange\n                        color: '#FFA500',\n                        weight: 2,\n                        opacity: 0.7,\n                        fillOpacity: 0.5\n                    });\n                    casMarker.bindTooltip(\n                        `<div style=\\\"font-weight: bold; color: #FFA500;\\\">${zoneName}</div>` +\n                        `<div><strong>Cas:</strong> ${zoneStats.totalCas.toLocaleString()}</div>` +\n                        `<div><strong>D\u00E9c\u00E8s:</strong> ${zoneStats.totalDeces.toLocaleString()}</div>`\n                    );\n                    choleraMarkers.addLayer(casMarker);\n                }\n                // Cercle de d\u00E9c\u00E8s : taille variable selon la valeur, couleur rouge fixe\n                if (zoneStats.totalDeces > 0) {\n                    const center = layer.getBounds().getCenter();\n                    const radius = Math.max(3, Math.min(15, zoneStats.totalDeces / 10));\n                    const decesMarker = L.circleMarker(center, {\n                        radius: radius,\n                        fillColor: '#B22222', // rouge fixe\n                        color: '#B22222',\n                        weight: 2,\n                        opacity: 0.8,\n                        fillOpacity: 0.8\n                    });\n                    decesMarker.bindTooltip(\n                        `<div style=\\\"font-weight: bold; color: #B22222;\\\">${zoneName}</div>` +\n                        `<div><strong>D\u00E9c\u00E8s:</strong> ${zoneStats.totalDeces.toLocaleString()}</div>` +\n                        `<div><strong>Cas:</strong> ${zoneStats.totalCas.toLocaleString()}</div>`\n                    );\n                    choleraMarkers.addLayer(decesMarker);\n                }\n            }\n        }\n    });\n    \n    choleraMarkers.addTo(map);\n    console.log('Projection spatiale chol\u00E9ra appliqu\u00E9e');\n}\n\n// Fonction pour afficher la l\u00E9gende des couleurs\nfunction displayColorLegend() {\n    // Toggle : si la l\u00E9gende existe, la masquer et sortir\n    const existingLegend = document.getElementById('cholera-legend');\n    if (existingLegend) {\n        existingLegend.remove();\n        return;\n    }\n\n    // Nouvelle l\u00E9gende adapt\u00E9e \u00E0 la projection spatiale (cercles seulement)\n    const legend = document.createElement('div');\n    legend.id = 'cholera-legend';\n    legend.style.cssText = `\n        position: absolute;\n        bottom: 20px;\n        left: 20px;\n        background: white;\n        padding: 10px;\n        border-radius: 8px;\n        box-shadow: 0 2px 10px rgba(0,0,0,0.1);\n        z-index: 1000;\n        max-width: 220px;\n        font-family: Arial, sans-serif;\n        font-size: 12px;\n    `;\n\n    legend.innerHTML = `\n        <h6 style=\"margin: 0 0 8px 0; color: #333; font-size: 13px;\">\uD83D\uDCCA L\u00E9gende Chol\u00E9ra</h6>\n        <div style=\"margin-bottom: 10px;\">\n            <div style=\"font-weight: bold; margin-bottom: 3px; color: #FFA500; font-size: 12px;\">Cercles des cas (orange)</div>\n            <div style=\"display: flex; align-items: center; margin-bottom: 3px;\">\n                <svg width=\"16\" height=\"16\"><circle cx=\"8\" cy=\"8\" r=\"4\" fill=\"#FFF2CC\" fill-opacity=\"0.5\" stroke=\"#FFA500\" stroke-width=\"1.5\"/></svg>\n                <span style=\"font-size: 11px; margin-left: 7px;\">0-100 cas</span>\n            </div>\n            <div style=\"display: flex; align-items: center; margin-bottom: 3px;\">\n                <svg width=\"19\" height=\"19\"><circle cx=\"9.5\" cy=\"9.5\" r=\"6\" fill=\"#FFD580\" fill-opacity=\"0.5\" stroke=\"#FFA500\" stroke-width=\"1.5\"/></svg>\n                <span style=\"font-size: 11px; margin-left: 7px;\">101-500 cas</span>\n            </div>\n            <div style=\"display: flex; align-items: center; margin-bottom: 3px;\">\n                <svg width=\"22\" height=\"22\"><circle cx=\"11\" cy=\"11\" r=\"9\" fill=\"#FFA500\" fill-opacity=\"0.5\" stroke=\"#FFA500\" stroke-width=\"1.5\"/></svg>\n                <span style=\"font-size: 11px; margin-left: 7px;\">501-1000 cas</span>\n            </div>\n            <div style=\"display: flex; align-items: center; margin-bottom: 3px;\">\n                <svg width=\"25\" height=\"25\"><circle cx=\"12.5\" cy=\"12.5\" r=\"12\" fill=\"#FF8C00\" fill-opacity=\"0.5\" stroke=\"#FFA500\" stroke-width=\"1.5\"/></svg>\n                <span style=\"font-size: 11px; margin-left: 7px;\">1000+ cas</span>\n            </div>\n        </div>\n        <div style=\"margin-bottom: 10px;\">\n            <div style=\"font-weight: bold; margin-bottom: 3px; color: #B22222; font-size: 12px;\">Cercles des d\u00E9c\u00E8s (rouge)</div>\n            <div style=\"display: flex; align-items: center; margin-bottom: 3px;\">\n                <svg width=\"12\" height=\"12\"><circle cx=\"6\" cy=\"6\" r=\"3\" fill=\"#B22222\" fill-opacity=\"0.8\" stroke=\"#B22222\" stroke-width=\"1.5\"/></svg>\n                <span style=\"font-size: 11px; margin-left: 7px;\">0-5 d\u00E9c\u00E8s</span>\n            </div>\n            <div style=\"display: flex; align-items: center; margin-bottom: 3px;\">\n                <svg width=\"18\" height=\"18\"><circle cx=\"9\" cy=\"9\" r=\"6\" fill=\"#B22222\" fill-opacity=\"0.8\" stroke=\"#B22222\" stroke-width=\"1.5\"/></svg>\n                <span style=\"font-size: 11px; margin-left: 7px;\">6-20 d\u00E9c\u00E8s</span>\n            </div>\n            <div style=\"display: flex; align-items: center; margin-bottom: 3px;\">\n                <svg width=\"24\" height=\"24\"><circle cx=\"12\" cy=\"12\" r=\"10\" fill=\"#B22222\" fill-opacity=\"0.8\" stroke=\"#B22222\" stroke-width=\"1.5\"/></svg>\n                <span style=\"font-size: 11px; margin-left: 7px;\">21-50 d\u00E9c\u00E8s</span>\n            </div>\n            <div style=\"display: flex; align-items: center; margin-bottom: 3px;\">\n                <svg width=\"30\" height=\"30\"><circle cx=\"15\" cy=\"15\" r=\"14\" fill=\"#B22222\" fill-opacity=\"0.8\" stroke=\"#B22222\" stroke-width=\"1.5\"/></svg>\n                <span style=\"font-size: 11px; margin-left: 7px;\">50+ d\u00E9c\u00E8s</span>\n            </div>\n        </div>\n    `;\n\n    // Ajouter la l\u00E9gende \u00E0 la carte\n    const mapContainer = document.getElementById('geo-mapping');\n    if (mapContainer) {\n        mapContainer.appendChild(legend);\n    }\n}\n\n// Fonction pour basculer la coloration du chol\u00E9ra\nfunction toggleCholeraColoring() {\n    if (map.hasLayer(choleraMarkers)) {\n        map.removeLayer(choleraMarkers);\n        console.log('Coloration du chol\u00E9ra d\u00E9sactiv\u00E9e');\n    } else {\n        choleraMarkers.addTo(map);\n        console.log('Coloration du chol\u00E9ra activ\u00E9e');\n    }\n}\n\n// Fonction pour filtrer les donn\u00E9es par ann\u00E9e\nfunction filterCholeraDataByYear(startYear, endYear, weekNumber = null) {\n    if (!choleraData) return;\n    \n    console.log(`Filtrage des donn\u00E9es de ${startYear} \u00E0 ${endYear}` + (weekNumber ? `, semaine ${weekNumber}` : '...'));\n    \n    // Filtrer les donn\u00E9es par ann\u00E9e et semaine si pr\u00E9cis\u00E9\n    const filteredData = choleraData.filter(record => {\n        const year = parseInt(record.Annees) || 0;\n        const week = parseInt(record.Semaines) || 0;\n        const inYear = year >= startYear && year <= endYear;\n        const inWeek = weekNumber ? (week === weekNumber) : true;\n        return inYear && inWeek;\n    });\n    \n    // Recalculer les statistiques avec les donn\u00E9es filtr\u00E9es\n    calculateCholeraStatisticsFromData(filteredData);\n    createColorScales();\n    applyCholeraColoring();\n    displayColorLegend();\n    console.log(`Donn\u00E9es filtr\u00E9es: ${filteredData.length} enregistrements sur ${choleraData.length} total`);\n}\n\n// Fonction pour calculer les statistiques \u00E0 partir de donn\u00E9es sp\u00E9cifiques\nfunction calculateCholeraStatisticsFromData(data) {\n    if (!data) return;\n    \n    const zoneStats = {};\n    const dpsStats = {};\n    const provinceStats = {};\n    \n    data.forEach(record => {\n        const zone = record.ZoneDeSante;\n        const dps = record.DPS;\n        const province = record.Province;\n        const cas = parseInt(record.Cas) || 0;\n        const deces = parseInt(record.Deces) || 0;\n        const pop = parseFloat(record.Pop) || 0;\n        const annee = parseInt(record.Annees) || 0;\n        \n        // Statistiques par zone de sant\u00E9\n        if (!zoneStats[zone]) {\n            zoneStats[zone] = {\n                totalCas: 0,\n                totalDeces: 0,\n                totalPop: 0,\n                annees: new Set(),\n                dps: dps,\n                province: province,\n                records: []\n            };\n        }\n        zoneStats[zone].totalCas += cas;\n        zoneStats[zone].totalDeces += deces;\n        zoneStats[zone].totalPop = Math.max(zoneStats[zone].totalPop, pop);\n        zoneStats[zone].annees.add(annee);\n        zoneStats[zone].records.push(record);\n        \n        // Statistiques par DPS\n        if (!dpsStats[dps]) {\n            dpsStats[dps] = {\n                totalCas: 0,\n                totalDeces: 0,\n                totalPop: 0,\n                zones: new Set(),\n                province: province,\n                annees: new Set()\n            };\n        }\n        dpsStats[dps].totalCas += cas;\n        dpsStats[dps].totalDeces += deces;\n        dpsStats[dps].totalPop = Math.max(dpsStats[dps].totalPop, pop);\n        dpsStats[dps].zones.add(zone);\n        dpsStats[dps].annees.add(annee);\n        \n        // Statistiques par province\n        if (!provinceStats[province]) {\n            provinceStats[province] = {\n                totalCas: 0,\n                totalDeces: 0,\n                totalPop: 0,\n                dps: new Set(),\n                zones: new Set(),\n                annees: new Set()\n            };\n        }\n        provinceStats[province].totalCas += cas;\n        provinceStats[province].totalDeces += deces;\n        provinceStats[province].totalPop = Math.max(provinceStats[province].totalPop, pop);\n        provinceStats[province].dps.add(dps);\n        provinceStats[province].zones.add(zone);\n        provinceStats[province].annees.add(annee);\n    });\n    \n    // Convertir les Sets en Arrays pour l'affichage\n    Object.keys(zoneStats).forEach(zone => {\n        zoneStats[zone].annees = Array.from(zoneStats[zone].annees).sort();\n        zoneStats[zone].anneesCount = zoneStats[zone].annees.length;\n    });\n    \n    Object.keys(dpsStats).forEach(dps => {\n        dpsStats[dps].zones = Array.from(dpsStats[dps].zones);\n        dpsStats[dps].annees = Array.from(dpsStats[dps].annees).sort();\n        dpsStats[dps].zonesCount = dpsStats[dps].zones.length;\n        dpsStats[dps].anneesCount = dpsStats[dps].annees.length;\n    });\n    \n    Object.keys(provinceStats).forEach(province => {\n        provinceStats[province].dps = Array.from(provinceStats[province].dps);\n        provinceStats[province].zones = Array.from(provinceStats[province].zones);\n        provinceStats[province].annees = Array.from(provinceStats[province].annees).sort();\n        provinceStats[province].dpsCount = provinceStats[province].dps.length;\n        provinceStats[province].zonesCount = provinceStats[province].zones.length;\n        provinceStats[province].anneesCount = provinceStats[province].annees.length;\n    });\n    \n    // Mettre \u00E0 jour les statistiques globales\n    choleraStatistics = {\n        zones: zoneStats,\n        dps: dpsStats,\n        provinces: provinceStats\n    };\n    \n    // Mettre \u00E0 jour l'index de recherche\n    updateSearchIndexWithCholeraData();\n    \n    console.log('Statistiques recalcul\u00E9es avec les donn\u00E9es filtr\u00E9es');\n}\n\n// Fonction pour r\u00E9initialiser les donn\u00E9es (toutes les ann\u00E9es)\nfunction resetCholeraData() {\n    if (choleraData) {\n        calculateCholeraStatisticsFromData(choleraData);\n        console.log('Donn\u00E9es r\u00E9initialis\u00E9es (toutes les ann\u00E9es)');\n    }\n}\n\n// Fonction pour appliquer le filtre par ann\u00E9e depuis l'interface\nfunction applyYearFilter() {\n    const startYear = parseInt(document.getElementById('filter-start-year').value) || 2000;\n    const endYear = parseInt(document.getElementById('filter-end-year').value) || 2025;\n    \n    if (startYear > endYear) {\n        alert('L\\'ann\u00E9e de d\u00E9but doit \u00EAtre inf\u00E9rieure ou \u00E9gale \u00E0 l\\'ann\u00E9e de fin');\n        return;\n    }\n    \n    filterCholeraDataByYear(startYear, endYear);\n    \n    // Mettre \u00E0 jour le r\u00E9sum\u00E9 global\n    displayGlobalCholeraSummary();\n}\n\n// Initialisation de la carte\nconst map = L.map('geo-mapping', {\n    zoomControl: false,\n    center: [-2.8742272710558296, 23.635858338586445],\n    zoom: 5.5876\n});\n\n// Rendre la carte et les fonctions disponibles globalement\nwindow.map = map;\nwindow.displayGlobalCholeraSummary = displayGlobalCholeraSummary;\nwindow.selectSearchResult = selectSearchResult;\n\n// Fonction pour effacer les informations affich\u00E9es\nfunction clearProvinceInfo() {\n    const infoDiv = document.getElementById('province-info');\n    if (infoDiv) {\n        infoDiv.innerHTML = `\n            <div class=\"text-center\">\n                <div class=\"spinner-border text-primary\" role=\"status\">\n                    <span class=\"visually-hidden\">Chargement...</span>\n                </div>\n                <p class=\"mt-2\">Chargement des statistiques...</p>\n            </div>\n        `;\n    }\n}\n\nwindow.clearProvinceInfo = clearProvinceInfo;\nwindow.displayColorLegend = displayColorLegend;\nwindow.toggleCholeraColoring = toggleCholeraColoring;\nwindow.applyCholeraColoring = applyCholeraColoring;\nwindow.calculateCholeraStatisticsFromData = calculateCholeraStatisticsFromData;\nwindow.filterCholeraDataByYear = filterCholeraDataByYear;\nwindow.resetCholeraData = resetCholeraData;\nwindow.applyYearFilter = applyYearFilter;\n\n// Synchronisation de la carte avec les filtres (projection spatiale)\nwindow.syncCholeraMapWithFilter = function(filteredData) {\n    if (window.calculateCholeraStatisticsFromData && window.createColorScales && window.applyCholeraColoring && window.displayColorLegend) {\n        window.calculateCholeraStatisticsFromData(filteredData);\n        window.createColorScales();\n        window.applyCholeraColoring();\n        window.displayColorLegend();\n        console.log('Carte synchronis\u00E9e avec les filtres');\n    } else {\n        console.warn('Impossible de synchroniser la carte : fonctions manquantes');\n    }\n};\n\n// Configuration des couches de base\nconst baseLayers = {\n    \"OpenStreetMap\": L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n        maxZoom: 19,\n        attribution: '&copy; <a href=\"#!\">INOHA</a>/ UNIKIN Kinshasa-DR.Congo'\n    }),\n    \"Satellite\": L.tileLayer('https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}', {\n        maxZoom: 19,\n        attribution: 'Tiles &copy; Esri &mdash; Source: Esri, i-cubed, USDA, USGS, AEX, GeoEye, Getmapping, Aerogrid, IGN, IGP, UPR-EGP, and the GIS User Community'\n    })\n};\n\n// Ajouter la couche OpenStreetMap par d\u00E9faut\nbaseLayers[\"OpenStreetMap\"].addTo(map);\n\n// Removed the layers control to hide the base map/satellite toggle UI\n// L.control.layers(baseLayers, null, { position: 'topright' }).addTo(map);\n\n// Variables pour les marqueurs et les couches\nconst mapMarkers = L.layerGroup().addTo(map);\nconst drawnItems = new L.FeatureGroup();\nmap.addLayer(drawnItems);\n\n// Gestion des erreurs de g\u00E9olocalisation\nmap.on('locationerror', function (e) {\n    console.error(\"Erreur de g\u00E9olocalisation:\", e.message);\n});\n\n// Charger les zones de sant\u00E9 et les donn\u00E9es du chol\u00E9ra imm\u00E9diatement au d\u00E9marrage\nloadZonesData();\nloadCholeraData();\n\n// Fonction pour initialiser la recherche\nfunction initializeSearch() {\n    const searchInput = document.getElementById('search-motif');\n    const searchResults = document.getElementById('search-results');\n    \n    if (!searchInput || !searchResults) {\n        console.log('\u00C9l\u00E9ments de recherche non trouv\u00E9s');\n        return;\n    }\n    \n    let searchTimeout;\n    \n    searchInput.addEventListener('input', function() {\n        const query = this.value.trim();\n        \n        // Effacer le timeout pr\u00E9c\u00E9dent\n        if (searchTimeout) {\n            clearTimeout(searchTimeout);\n        }\n        \n        // Masquer les r\u00E9sultats si la requ\u00EAte est vide\n        if (query.length < 2) {\n            searchResults.innerHTML = '';\n            searchResults.style.display = 'none';\n            return;\n        }\n        \n        // Attendre 300ms avant de rechercher\n        searchTimeout = setTimeout(() => {\n            const results = searchInAllData(query);\n            displaySearchResults(results, searchResults);\n        }, 300);\n    });\n    \n    // Masquer les r\u00E9sultats quand on clique ailleurs\n    document.addEventListener('click', function(e) {\n        if (!searchInput.contains(e.target) && !searchResults.contains(e.target)) {\n            searchResults.style.display = 'none';\n        }\n    });\n}\n\n// Fonction pour afficher les r\u00E9sultats de recherche\nfunction displaySearchResults(results, container) {\n    if (results.length === 0) {\n        container.innerHTML = '<div class=\"p-2 text-muted\">Aucun r\u00E9sultat trouv\u00E9</div>';\n        container.style.display = 'block';\n        return;\n    }\n    \n    const html = results.map(result => {\n        const icon = result.type === 'Zone de Sant\u00E9' ? '\uD83C\uDFE5' : \n                    result.type === 'DPS' ? '\uD83C\uDFDB\uFE0F' : '\uD83D\uDDFA\uFE0F';\n        \n        return `\n            <div class=\"search-result-item p-2 border-bottom\" \n                 onclick=\"selectSearchResult(${JSON.stringify(result).replace(/\"/g, '&quot;')})\">\n                <div class=\"d-flex align-items-center\">\n                    <span class=\"me-2\">${icon}</span>\n                    <div>\n                        <div class=\"fw-bold\">${result.displayName}</div>\n                        <small class=\"text-muted\">${result.type}</small>\n                    </div>\n                </div>\n            </div>\n        `;\n    }).join('');\n    \n    container.innerHTML = html;\n    container.style.display = 'block';\n}\n\n// Fonction pour s\u00E9lectionner un r\u00E9sultat de recherche\nfunction selectSearchResult(result) {\n    // Masquer les r\u00E9sultats\n    const searchResults = document.getElementById('search-results');\n    if (searchResults) {\n        searchResults.style.display = 'none';\n    }\n    \n    // Mettre \u00E0 jour le champ de recherche\n    const searchInput = document.getElementById('search-motif');\n    if (searchInput) {\n        searchInput.value = result.displayName;\n    }\n    \n    // Mettre en \u00E9vidence sur la carte et afficher les informations\n    highlightZoneOnMap(result);\n}\n\n// Fonction pour afficher un r\u00E9sum\u00E9 global des statistiques du chol\u00E9ra\nfunction displayGlobalCholeraSummary() {\n    if (!choleraStatistics) {\n        console.log('Statistiques du chol\u00E9ra non disponibles');\n        return;\n    }\n    \n    // Correction : utiliser des objets vides par d\u00E9faut si les propri\u00E9t\u00E9s sont absentes\n    const provinces = choleraStatistics.provinces || {};\n    const dps = choleraStatistics.dps || {};\n    const zones = choleraStatistics.zones || {};\n    \n    // Calculer les totaux globaux\n    let totalCas = 0;\n    let totalDeces = 0;\n    let totalPop = 0;\n    let totalZones = Object.keys(zones).length;\n    let totalDps = Object.keys(dps).length;\n    let totalProvinces = Object.keys(provinces).length;\n    \n    Object.values(provinces).forEach(province => {\n        totalCas += province.totalCas;\n        totalDeces += province.totalDeces;\n        totalPop = Math.max(totalPop, province.totalPop);\n    });\n    \n    const tauxMortaliteGlobal = totalCas > 0 ? ((totalDeces / totalCas) * 100).toFixed(2) : 0;\n    const tauxIncidenceGlobal = totalPop > 0 ? ((totalCas / totalPop) * 100000).toFixed(2) : 0;\n    \n    // Trouver les provinces les plus touch\u00E9es\n    const provincesTriees = Object.entries(provinces)\n        .sort((a, b) => b[1].totalCas - a[1].totalCas)\n        .slice(0, 5);\n    \n    const infoDiv = document.getElementById('province-info');\n    if (infoDiv) {\n        infoDiv.innerHTML = `\n            <h5 class=\"border-bottom pb-2 mb-3\">\uD83D\uDCCA R\u00E9sum\u00E9 Global Chol\u00E9ra</h5>\n            \n            <div class=\"row mb-3\">\n                <div class=\"col-6\">\n                    <div class=\"text-center p-3 bg-danger text-white rounded\">\n                        <h4 class=\"mb-0\">${totalCas.toLocaleString()}</h4>\n                        <small>Total Cas</small>\n                    </div>\n                </div>\n                <div class=\"col-6\">\n                    <div class=\"text-center p-3 bg-dark text-white rounded\">\n                        <h4 class=\"mb-0\">${totalDeces.toLocaleString()}</h4>\n                        <small>Total D\u00E9c\u00E8s</small>\n                    </div>\n                </div>\n            </div>\n            \n            <div class=\"row mb-3\">\n                <div class=\"col-6\">\n                    <div class=\"text-center p-3 bg-warning text-dark rounded\">\n                        <h4 class=\"mb-0\">${tauxMortaliteGlobal}%</h4>\n                        <small>Taux Mortalit\u00E9</small>\n                    </div>\n                </div>\n                <div class=\"col-6\">\n                    <div class=\"text-center p-3 bg-info text-white rounded\">\n                        <h4 class=\"mb-0\">${tauxIncidenceGlobal}</h4>\n                        <small>Incidence/100k</small>\n                    </div>\n                </div>\n            </div>\n            \n            <div class=\"row mb-3\">\n                <div class=\"col-4\">\n                    <div class=\"text-center p-2 bg-primary text-white rounded\">\n                        <h5 class=\"mb-0\">${totalProvinces}</h5>\n                        <small>Provinces</small>\n                    </div>\n                </div>\n                <div class=\"col-4\">\n                    <div class=\"text-center p-2 bg-success text-white rounded\">\n                        <h5 class=\"mb-0\">${totalDps}</h5>\n                        <small>DPS</small>\n                    </div>\n                </div>\n                <div class=\"col-4\">\n                    <div class=\"text-center p-2 bg-secondary text-white rounded\">\n                        <h5 class=\"mb-0\">${totalZones}</h5>\n                        <small>Zones de Sant\u00E9</small>\n                    </div>\n                </div>\n            </div>\n            \n            <div class=\"mt-3\">\n                <h6 class=\"text-primary\">\uD83C\uDFC6 Top 5 Provinces les plus touch\u00E9es:</h6>\n                <div class=\"list-group list-group-flush\">\n                    ${provincesTriees.map((province, index) => {\n                        const taux = province[1].totalCas > 0 ? ((province[1].totalDeces / province[1].totalCas) * 100).toFixed(1) : 0;\n                        return `\n                            <div class=\"list-group-item d-flex justify-content-between align-items-center\">\n                                <div>\n                                    <span class=\"badge bg-primary me-2\">${index + 1}</span>\n                                    ${province[0]}\n                                </div>\n                                <div class=\"text-end\">\n                                    <div class=\"fw-bold\">${province[1].totalCas.toLocaleString()} cas</div>\n                                    <small class=\"text-muted\">${taux}% mortalit\u00E9</small>\n                                </div>\n                            </div>\n                        `;\n                    }).join('')}\n                </div>\n            </div>\n            \n            <div class=\"mt-3\">\n                <button class=\"btn btn-outline-primary btn-sm\" onclick=\"displayGlobalCholeraSummary()\">\n                    \uD83D\uDD04 Actualiser\n                </button>\n            </div>\n        `;\n    }\n}\n\n// === [1] AJOUT DU FORMULAIRE DE FILTRES DANS LE DOM ===\ndocument.addEventListener('DOMContentLoaded', function() {\n    // Ajout du formulaire de filtres si la carte existe\n    const mapContainer = document.getElementById('geo-mapping');\n    if (mapContainer && !document.getElementById('advanced-filters')) {\n        const filterDiv = document.createElement('div');\n        filterDiv.id = 'advanced-filters';\n        filterDiv.style.cssText = `\n            position: absolute;\n            top: 70px;\n            left: 15px;\n            padding: 12px 16px;\n            border-radius: 8px;\n            box-shadow: 0 2px 10px rgba(0,0,0,0.08);\n            z-index: 1100;\n            font-size: 13px;\n            max-width: 350px;\n        `;\n        filterDiv.classList.add('bg-body', 'border');\n        filterDiv.innerHTML = `\n            <div style=\"font-weight:bold; margin-bottom:8px;\">Filtres avanc\u00E9s</div>\n            <div class=\"row g-1\">\n                <div class=\"col-6 mb-1\"><input id=\"filter-annee\" class=\"form-control form-control-sm\" type=\"number\" placeholder=\"Ann\u00E9e\"></div>\n                <div class=\"col-6 mb-1\"><input id=\"filter-semaine\" class=\"form-control form-control-sm\" type=\"number\" placeholder=\"Semaine\"></div>\n                <div class=\"col-6 mb-1\"><input id=\"filter-dps\" class=\"form-control form-control-sm\" type=\"text\" placeholder=\"DPS\"></div>\n                <div class=\"col-6 mb-1\"><input id=\"filter-province\" class=\"form-control form-control-sm\" type=\"text\" placeholder=\"Province\"></div>\n                <div class=\"col-6 mb-1\"><input id=\"filter-zone\" class=\"form-control form-control-sm\" type=\"text\" placeholder=\"Zone de Sant\u00E9\"></div>\n                <div class=\"col-6 mb-1\"><input id=\"filter-cas-min\" class=\"form-control form-control-sm\" type=\"number\" placeholder=\"Cas min\">\n                </div>\n                <div class=\"col-6 mb-1\"><input id=\"filter-cas-max\" class=\"form-control form-control-sm\" type=\"number\" placeholder=\"Cas max\">\n                </div>\n                <div class=\"col-6 mb-1\"><input id=\"filter-deces-min\" class=\"form-control form-control-sm\" type=\"number\" placeholder=\"D\u00E9c\u00E8s min\">\n                </div>\n                <div class=\"col-6 mb-1\"><input id=\"filter-deces-max\" class=\"form-control form-control-sm\" type=\"number\" placeholder=\"D\u00E9c\u00E8s max\">\n                </div>\n            </div>\n            <div class=\"mt-2 d-flex gap-2\">\n                <button id=\"btn-filtrer\" class=\"btn btn-primary btn-sm w-100\">Filtrer</button>\n                <button id=\"btn-reset-filtre\" class=\"btn btn-outline-secondary btn-sm w-100\">R\u00E9initialiser</button>\n            </div>\n        `;\n        mapContainer.appendChild(filterDiv);\n    }\n});\n\n// === [1BIS] AJOUT DU CHECKBOX COURS D'EAU DANS LE FILTRE AVANC\u00C9 ===\ndocument.addEventListener('DOMContentLoaded', function() {\n    // Ajout du checkbox si le formulaire existe\n    const filterDiv = document.getElementById('advanced-filters');\n    if (filterDiv && !document.getElementById('toggle-cours-eau')) {\n        const checkboxDiv = document.createElement('div');\n        checkboxDiv.className = 'form-check mt-2 mb-2';\n        checkboxDiv.innerHTML = `\n            <input class=\"form-check-input\" type=\"checkbox\" id=\"toggle-cours-eau\">\n            <label class=\"form-check-label\" for=\"toggle-cours-eau\">Afficher les cours d'eau</label>\n        `;\n        // Ajouter avant les boutons\n        const btnRow = filterDiv.querySelector('.mt-2.d-flex') || filterDiv.lastChild;\n        filterDiv.insertBefore(checkboxDiv, btnRow);\n    }\n});\n\n// === [1TER] GESTION AFFICHAGE COURS D'EAU GEOJSON ===\nlet coursEauLayer = null;\nlet coursEauGeojsonLoaded = false;\n\n// Charger la couche des cours d'eau juste apr\u00E8s les zones de sant\u00E9\nasync function loadCoursEauLayer() {\n    if (coursEauGeojsonLoaded) return;\n    try {\n        const response = await fetch('./lib/leaflet/cours_eau.geojson');\n        const geojson = await response.json();\n        coursEauLayer = L.geoJSON(geojson, {\n            style: { color: '#1E90FF', weight: 2, opacity: 0.8 },\n            onEachFeature: function (feature, layer) {\n                if (feature.properties && feature.properties.nom) {\n                    layer.bindTooltip(feature.properties.nom, {direction: 'top'});\n                }\n            }\n        });\n        coursEauGeojsonLoaded = true;\n    } catch (e) {\n        console.error(\"Erreur lors du chargement des cours d'eau:\", e);\n    }\n}\n\n// === [2] FONCTION DE FILTRAGE AVANC\u00C9 ===\nfunction filterCholeraDataAdvanced(filters) {\n    if (!choleraData) return [];\n    return choleraData.filter(record => {\n        if (filters.annee && parseInt(record.Annees) !== parseInt(filters.annee)) return false;\n        if (filters.semaine && parseInt(record.Semaines) !== parseInt(filters.semaine)) return false;\n        if (filters.dps && record.DPS && !record.DPS.toLowerCase().includes(filters.dps.toLowerCase())) return false;\n        if (filters.province && record.Province && !record.Province.toLowerCase().includes(filters.province.toLowerCase())) return false;\n        if (filters.zone && record.ZoneDeSante && !record.ZoneDeSante.toLowerCase().includes(filters.zone.toLowerCase())) return false;\n        if (filters.casMin && parseInt(record.Cas) < parseInt(filters.casMin)) return false;\n        if (filters.casMax && parseInt(record.Cas) > parseInt(filters.casMax)) return false;\n        if (filters.decesMin && parseInt(record.Deces) < parseInt(filters.decesMin)) return false;\n        if (filters.decesMax && parseInt(record.Deces) > parseInt(filters.decesMax)) return false;\n        return true;\n    });\n}\n\n// === [3] GESTIONNAIRE DU BOUTON FILTRER ET RESET ===\ndocument.addEventListener('DOMContentLoaded', function() {\n    // Initialiser la recherche\n    initializeSearch();\n    \n    // Afficher le r\u00E9sum\u00E9 global apr\u00E8s un d\u00E9lai pour laisser le temps aux donn\u00E9es de se charger\n    setTimeout(() => {\n        // Gestionnaire du bouton Filtrer\n        const btnFiltrer = document.getElementById('btn-filtrer');\n        if (btnFiltrer) {\n            btnFiltrer.addEventListener('click', function() {\n                const filters = {\n                    annee: document.getElementById('filter-annee').value,\n                    semaine: document.getElementById('filter-semaine').value,\n                    dps: document.getElementById('filter-dps').value,\n                    province: document.getElementById('filter-province').value,\n                    zone: document.getElementById('filter-zone').value,\n                    casMin: document.getElementById('filter-cas-min').value,\n                    casMax: document.getElementById('filter-cas-max').value,\n                    decesMin: document.getElementById('filter-deces-min').value,\n                    decesMax: document.getElementById('filter-deces-max').value,\n                };\n                const filteredData = filterCholeraDataAdvanced(filters);\n                calculateCholeraStatisticsFromData(filteredData);\n                createColorScales();\n                applyCholeraColoring();\n                displayColorLegend();\n                displayGlobalCholeraSummary();\n            });\n        }\n        // Gestionnaire du bouton R\u00E9initialiser\n        const btnReset = document.getElementById('btn-reset-filtre');\n        if (btnReset) {\n            btnReset.addEventListener('click', function() {\n                document.getElementById('filter-annee').value = '';\n                document.getElementById('filter-semaine').value = '';\n                document.getElementById('filter-dps').value = '';\n                document.getElementById('filter-province').value = '';\n                document.getElementById('filter-zone').value = '';\n                document.getElementById('filter-cas-min').value = '';\n                document.getElementById('filter-cas-max').value = '';\n                document.getElementById('filter-deces-min').value = '';\n                document.getElementById('filter-deces-max').value = '';\n                // R\u00E9initialiser les donn\u00E9es\n                resetCholeraData();\n                createColorScales();\n                applyCholeraColoring();\n                displayColorLegend();\n                displayGlobalCholeraSummary();\n            });\n        }\n    }, 2200); // attendre que la carte et les donn\u00E9es soient pr\u00EAtes\n});\n\n// Remplir dynamiquement les selects multiples apr\u00E8s chargement des donn\u00E9es choleraData\nfunction populateAdvancedFilterSelects() {\n    if (!choleraData) return;\n    // Ann\u00E9e\n    const anneeSelect = document.getElementById('filter-annee');\n    if (anneeSelect) {\n        anneeSelect.innerHTML = '';\n        const annees = Array.from(new Set(choleraData.map(r => r.Annees).filter(Boolean))).sort((a, b) => b - a);\n        annees.forEach(a => {\n            const opt = document.createElement('option');\n            opt.value = a;\n            opt.textContent = a;\n            anneeSelect.appendChild(opt);\n        });\n    }\n    // Semaine\n    const semaineSelect = document.getElementById('filter-semaine');\n    if (semaineSelect) {\n        semaineSelect.innerHTML = '';\n        const semaines = Array.from(new Set(choleraData.map(r => r.Semaines).filter(Boolean))).sort((a, b) => a - b);\n        semaines.forEach(s => {\n            const opt = document.createElement('option');\n            opt.value = s;\n            opt.textContent = s;\n            semaineSelect.appendChild(opt);\n        });\n    }\n    // DPS\n    const dpsSelect = document.getElementById('filter-dps');\n    if (dpsSelect) {\n        dpsSelect.innerHTML = '';\n        const dpss = Array.from(new Set(choleraData.map(r => r.DPS).filter(Boolean))).sort();\n        dpss.forEach(d => {\n            const opt = document.createElement('option');\n            opt.value = d;\n            opt.textContent = d;\n            dpsSelect.appendChild(opt);\n        });\n    }\n    // Province\n    const provinceSelect = document.getElementById('filter-province');\n    if (provinceSelect) {\n        provinceSelect.innerHTML = '';\n        const provinces = Array.from(new Set(choleraData.map(r => r.Province).filter(Boolean))).sort();\n        provinces.forEach(p => {\n            const opt = document.createElement('option');\n            opt.value = p;\n            opt.textContent = p;\n            provinceSelect.appendChild(opt);\n        });\n    }\n    // Zone de Sant\u00E9\n    const zoneSelect = document.getElementById('filter-zone');\n    if (zoneSelect) {\n        zoneSelect.innerHTML = '';\n        const zones = Array.from(new Set(choleraData.map(r => r.ZoneDeSante).filter(Boolean))).sort();\n        zones.forEach(z => {\n            const opt = document.createElement('option');\n            opt.value = z;\n            opt.textContent = z;\n            zoneSelect.appendChild(opt);\n        });\n    }\n}\n\n// Gestion du checkbox (affichage/masquage)\ndocument.addEventListener('DOMContentLoaded', function() {\n    const filterDiv = document.getElementById('advanced-filters');\n    if (!filterDiv) return;\n    const checkbox = document.getElementById('toggle-cours-eau');\n    if (!checkbox) return;\n    checkbox.addEventListener('change', async function() {\n        if (!coursEauGeojsonLoaded) {\n            await loadCoursEauLayer();\n        }\n        if (this.checked) {\n            if (coursEauLayer) {\n                coursEauLayer.addTo(map);\n                coursEauLayer.bringToFront();\n            }\n        } else {\n            if (coursEauLayer && map.hasLayer(coursEauLayer)) {\n                map.removeLayer(coursEauLayer);\n            }\n        }\n    });\n});\n\n// S'assurer que les zones sont charg\u00E9es quand le DOM est pr\u00EAt\ndocument.addEventListener('DOMContentLoaded', function() {\n    console.log('DOM charg\u00E9, v\u00E9rification des donn\u00E9es...');\n    \n    if (!zonesData) {\n        console.log('Zones de sant\u00E9 non charg\u00E9es, rechargement...');\n        loadZonesData();\n    } else {\n        console.log('Zones de sant\u00E9 d\u00E9j\u00E0 charg\u00E9es:', zonesData.features.length, 'zones');\n    }\n    \n    if (!choleraData) {\n        console.log('Donn\u00E9es du chol\u00E9ra non charg\u00E9es, rechargement...');\n        loadCholeraData();\n    } else {\n        console.log('Donn\u00E9es du chol\u00E9ra d\u00E9j\u00E0 charg\u00E9es:', choleraData.length, 'enregistrements');\n    }\n    \n    // Initialiser la recherche\n    initializeSearch();\n    \n    // Afficher le r\u00E9sum\u00E9 global apr\u00E8s un d\u00E9lai pour laisser le temps aux donn\u00E9es de se charger\n    setTimeout(() => {\n        if (choleraStatistics) {\n            displayGlobalCholeraSummary();\n            displayColorLegend();\n        } else {\n            // Attendre que les donn\u00E9es soient charg\u00E9es\n            const checkData = setInterval(() => {\n                if (choleraStatistics) {\n                    displayGlobalCholeraSummary();\n                    displayColorLegend();\n                    clearInterval(checkData);\n                }\n            }, 1000);\n        }\n    }, 2000);\n});\n"],
  "mappings": "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",
  "names": ["_", "IndexedDBEngine", "dbName", "storeName", "resolve", "reject", "request", "event", "db", "data", "id", "CHOLERA_STORE_NAME", "DB_NAME", "CholeraDataSync", "IndexedDBEngine", "error", "response", "choleraData", "item", "choleraDataSync", "healthZonesLayer", "choleraData", "searchIndex", "zonesData", "choleraStatistics", "colorScales", "choleraMarkers", "loadZonesData", "feature", "props", "addZonesToMap", "loadCoursEauLayer", "searchInput", "error", "map", "zonesLayer", "layer", "displayZoneInfo", "searchInAllData", "query", "searchTerm", "results", "zoneName", "zoneData", "dpsName", "provinceName", "a", "b", "aExact", "bExact", "typeOrder", "highlightZoneOnMap", "searchResult", "infoDiv", "zoneInfo", "choleraStats", "choleraInfo", "tauxMortalite", "tauxIncidence", "dpsStats", "provinceStats", "loadCholeraData", "calculateCholeraStatistics", "populateAdvancedFilterSelects", "zoneStats", "record", "zone", "dps", "province", "cas", "deces", "pop", "annee", "updateSearchIndexWithCholeraData", "createColorScales", "applyCholeraColoring", "allCas", "allDeces", "maxCas", "maxDeces", "toggleHealthZones", "show", "response", "data", "applyCholeraColoring", "map", "choleraMarkers", "layer", "zoneName", "choleraStatistics", "zoneStats", "center", "radiusCas", "casMarker", "radius", "decesMarker", "displayColorLegend", "existingLegend", "legend", "mapContainer", "toggleCholeraColoring", "filterCholeraDataByYear", "startYear", "endYear", "weekNumber", "choleraData", "filteredData", "record", "year", "week", "calculateCholeraStatisticsFromData", "createColorScales", "data", "dpsStats", "provinceStats", "zone", "dps", "province", "cas", "deces", "pop", "annee", "updateSearchIndexWithCholeraData", "resetCholeraData", "applyYearFilter", "displayGlobalCholeraSummary", "selectSearchResult", "clearProvinceInfo", "infoDiv", "baseLayers", "mapMarkers", "drawnItems", "e", "loadZonesData", "loadCholeraData", "initializeSearch", "searchInput", "searchResults", "searchTimeout", "query", "results", "searchInAllData", "displaySearchResults", "container", "html", "result", "icon", "highlightZoneOnMap", "provinces", "zones", "totalCas", "totalDeces", "totalPop", "totalZones", "totalDps", "totalProvinces", "tauxMortaliteGlobal", "tauxIncidenceGlobal", "provincesTriees", "a", "b", "index", "taux", "filterDiv", "checkboxDiv", "btnRow", "coursEauLayer", "coursEauGeojsonLoaded", "loadCoursEauLayer", "geojson", "feature", "filterCholeraDataAdvanced", "filters", "btnFiltrer", "btnReset", "populateAdvancedFilterSelects", "anneeSelect", "r", "opt", "semaineSelect", "s", "dpsSelect", "d", "provinceSelect", "p", "zoneSelect", "z", "checkbox", "zonesData", "checkData"]
}
