{
  "version": 3,
  "sources": ["../../src/public/js/modules/IndexedDBEngine.js"],
  "sourcesContent": ["/**\n * Classe pour g\u00E9rer le stockage dans IndexedDB.\n * Fournit des m\u00E9thodes pour cr\u00E9er, lire, mettre \u00E0 jour et supprimer des \u00E9l\u00E9ments.\n *\n * @class IndexedDBEngine\n */\nexport default class IndexedDBEngine {\n    constructor(dbName, storeName) {\n        this.dbName = dbName;\n        this.storeName = storeName;\n    }\n\n    /**\n     * Ouvre la base de donn\u00E9es IndexedDB.\n     * @returns {Promise<IDBDatabase>}\n     */\n    openDB() {\n        return new Promise((resolve, reject) => {\n            const request = indexedDB.open(this.dbName, 1);\n\n            request.onupgradeneeded = (event) => {\n                const db = event.target.result;\n                if (!db.objectStoreNames.contains(this.storeName)) {\n                    db.createObjectStore(this.storeName, { keyPath: 'id', autoIncrement: true });\n                }\n            };\n\n            request.onsuccess = (event) => {\n                resolve(event.target.result);\n            };\n\n            request.onerror = (event) => {\n                reject(event.target.error);\n            };\n        });\n    }\n\n    /**\n     * Ajoute un \u00E9l\u00E9ment \u00E0 la base de donn\u00E9es.\n     * @param {Object} data - Les donn\u00E9es \u00E0 ajouter.\n     * @returns {Promise<number>} - L'ID de l'\u00E9l\u00E9ment ajout\u00E9.\n     */\n    addItem(data) {\n        return this.openDB().then(db => {\n            return new Promise((resolve, reject) => {\n                const transaction = db.transaction([this.storeName], 'readwrite');\n                const store = transaction.objectStore(this.storeName);\n                const request = store.add(data);\n\n                request.onsuccess = () => {\n                    resolve(request.result);\n                };\n\n                request.onerror = () => {\n                    reject(request.error);\n                };\n            });\n        });\n    }\n\n    /**\n     * R\u00E9cup\u00E8re tous les \u00E9l\u00E9ments de la base de donn\u00E9es.\n     * @returns {Promise<Array>} - Un tableau d'\u00E9l\u00E9ments.\n     */\n    getAllItems() {\n        return this.openDB().then(db => {\n            return new Promise((resolve, reject) => {\n                const transaction = db.transaction([this.storeName], 'readonly');\n                const store = transaction.objectStore(this.storeName);\n                const request = store.getAll();\n\n                request.onsuccess = () => {\n                    resolve(request.result);\n                };\n\n                request.onerror = () => {\n                    reject(request.error);\n                };\n            });\n        });\n    }\n\n    /**\n     * Supprime un \u00E9l\u00E9ment de la base de donn\u00E9es par son ID.\n     * @param {number} id - L'ID de l'\u00E9l\u00E9ment \u00E0 supprimer.\n     * @returns {Promise<void>}\n     */\n    deleteItem(id) {\n        return this.openDB().then(db => {\n            return new Promise((resolve, reject) => {\n                const transaction = db.transaction([this.storeName], 'readwrite');\n                const store = transaction.objectStore(this.storeName);\n                const request = store.delete(id);\n\n                request.onsuccess = () => {\n                    resolve();\n                };\n\n                request.onerror = () => {\n                    reject(request.error);\n                };\n            });\n        });\n    }\n}\n"],
  "mappings": "AAMA,IAAqBA,EAArB,KAAqC,CACjC,YAAYC,EAAQC,EAAW,CAC3B,KAAK,OAASD,EACd,KAAK,UAAYC,CACrB,CAMA,QAAS,CACL,OAAO,IAAI,QAAQ,CAACC,EAASC,IAAW,CACpC,IAAMC,EAAU,UAAU,KAAK,KAAK,OAAQ,CAAC,EAE7CA,EAAQ,gBAAmBC,GAAU,CACjC,IAAMC,EAAKD,EAAM,OAAO,OACnBC,EAAG,iBAAiB,SAAS,KAAK,SAAS,GAC5CA,EAAG,kBAAkB,KAAK,UAAW,CAAE,QAAS,KAAM,cAAe,EAAK,CAAC,CAEnF,EAEAF,EAAQ,UAAaC,GAAU,CAC3BH,EAAQG,EAAM,OAAO,MAAM,CAC/B,EAEAD,EAAQ,QAAWC,GAAU,CACzBF,EAAOE,EAAM,OAAO,KAAK,CAC7B,CACJ,CAAC,CACL,CAOA,QAAQE,EAAM,CACV,OAAO,KAAK,OAAO,EAAE,KAAKD,GACf,IAAI,QAAQ,CAACJ,EAASC,IAAW,CAGpC,IAAMC,EAFcE,EAAG,YAAY,CAAC,KAAK,SAAS,EAAG,WAAW,EACtC,YAAY,KAAK,SAAS,EAC9B,IAAIC,CAAI,EAE9BH,EAAQ,UAAY,IAAM,CACtBF,EAAQE,EAAQ,MAAM,CAC1B,EAEAA,EAAQ,QAAU,IAAM,CACpBD,EAAOC,EAAQ,KAAK,CACxB,CACJ,CAAC,CACJ,CACL,CAMA,aAAc,CACV,OAAO,KAAK,OAAO,EAAE,KAAKE,GACf,IAAI,QAAQ,CAACJ,EAASC,IAAW,CAGpC,IAAMC,EAFcE,EAAG,YAAY,CAAC,KAAK,SAAS,EAAG,UAAU,EACrC,YAAY,KAAK,SAAS,EAC9B,OAAO,EAE7BF,EAAQ,UAAY,IAAM,CACtBF,EAAQE,EAAQ,MAAM,CAC1B,EAEAA,EAAQ,QAAU,IAAM,CACpBD,EAAOC,EAAQ,KAAK,CACxB,CACJ,CAAC,CACJ,CACL,CAOA,WAAWI,EAAI,CACX,OAAO,KAAK,OAAO,EAAE,KAAKF,GACf,IAAI,QAAQ,CAACJ,EAASC,IAAW,CAGpC,IAAMC,EAFcE,EAAG,YAAY,CAAC,KAAK,SAAS,EAAG,WAAW,EACtC,YAAY,KAAK,SAAS,EAC9B,OAAOE,CAAE,EAE/BJ,EAAQ,UAAY,IAAM,CACtBF,EAAQ,CACZ,EAEAE,EAAQ,QAAU,IAAM,CACpBD,EAAOC,EAAQ,KAAK,CACxB,CACJ,CAAC,CACJ,CACL,CACJ",
  "names": ["IndexedDBEngine", "dbName", "storeName", "resolve", "reject", "request", "event", "db", "data", "id"]
}
