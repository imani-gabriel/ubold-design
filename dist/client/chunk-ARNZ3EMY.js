var c=class{constructor(t,r){this.dbName=t,this.storeName=r}openDB(){return new Promise((t,r)=>{let s=indexedDB.open(this.dbName,1);s.onupgradeneeded=e=>{let a=e.target.result;a.objectStoreNames.contains(this.storeName)||a.createObjectStore(this.storeName,{keyPath:"id",autoIncrement:!0})},s.onsuccess=e=>{t(e.target.result)},s.onerror=e=>{r(e.target.error)}})}addItem(t){return this.openDB().then(r=>new Promise((s,e)=>{let o=r.transaction([this.storeName],"readwrite").objectStore(this.storeName).add(t);o.onsuccess=()=>{s(o.result)},o.onerror=()=>{e(o.error)}}))}getAllItems(){return this.openDB().then(t=>new Promise((r,s)=>{let n=t.transaction([this.storeName],"readonly").objectStore(this.storeName).getAll();n.onsuccess=()=>{r(n.result)},n.onerror=()=>{s(n.error)}}))}deleteItem(t){return this.openDB().then(r=>new Promise((s,e)=>{let o=r.transaction([this.storeName],"readwrite").objectStore(this.storeName).delete(t);o.onsuccess=()=>{s()},o.onerror=()=>{e(o.error)}}))}};export{c as a};
//# sourceMappingURL=chunk-ARNZ3EMY.js.map
