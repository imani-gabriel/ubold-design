const mongoose = require('mongoose');
const Thematic = require('../models/thematic');

// Configuration MongoDB
const mongoUri = process.env.MONGODB_URI || 'mongodb://localhost:27017/observa';

// Donn√©es de test
const PROVINCES = [
    'Kinshasa', 'Kongo Central', 'Kwango', 'Kwilu', 'Mai-Ndombe',
    'Kasai', 'Kasai Central', 'Kasai Oriental', 'Lomami', 'Sankuru',
    'Maniema', 'Sud-Kivu', 'Nord-Kivu', 'Ituri', 'Haut-Uele',
    'Bas-Uele', 'Tshopo', 'Mongala', 'Ubangi Nord', 'Ubangi Sud',
    'Equateur', 'Tshuapa'
];

const DPS_LIST = [
    'DPS Kinshasa', 'DPS Kongo Central', 'DPS Kwango', 'DPS Kwilu',
    'DPS Mai-Ndombe', 'DPS Kasai', 'DPS Kasai Central', 'DPS Kasai Oriental',
    'DPS Lomami', 'DPS Sankuru', 'DPS Maniema', 'DPS Sud-Kivu',
    'DPS Nord-Kivu', 'DPS Ituri', 'DPS Haut-Uele', 'DPS Bas-Uele',
    'DPS Tshopo', 'DPS Mongala', 'DPS Ubangi Nord', 'DPS Ubangi Sud',
    'DPS Equateur', 'DPS Tshuapa'
];

const ZONES_SANTE = [
    'Zone de Sant√© Kinshasa', 'Zone de Sant√© Matete', 'Zone de Sant√© Limete',
    'Zone de Sant√© Ngaliema', 'Zone de Sant√© Mont-Ngafula', 'Zone de Sant√© Selembao',
    'Zone de Sant√© Bumbu', 'Zone de Sant√© Masina', 'Zone de Sant√© Kimbanseke',
    'Zone de Sant√© N\'Sele', 'Zone de Sant√© Maluku', 'Zone de Sant√© N\'Djili',
    'Zone de Sant√© Kisenso', 'Zone de Sant√© Lemba', 'Zone de Sant√© Ngaba',
    'Zone de Sant√© Bandalungwa', 'Zone de Sant√© Barumbu', 'Zone de Sant√© Gombe',
    'Zone de Sant√© Kalamu', 'Zone de Sant√© Kasa-Vubu', 'Zone de Sant√© Lingwala'
];

// Fonction pour g√©n√©rer des donn√©es al√©atoires
function generateRandomData(year, week, province, dps, zone) {
    const baseCases = Math.floor(Math.random() * 100) + 1;
    const baseDeaths = Math.floor(Math.random() * 20) + 1;
    
    // Variation saisonni√®re (plus de cas en saison des pluies)
    const seasonalFactor = 1 + (Math.sin((week / 52) * Math.PI) * 0.3);
    
    // Variation par province (certaines provinces plus touch√©es)
    const provinceFactor = province.includes('Kinshasa') ? 2.5 : 
                          province.includes('Kasai') ? 1.8 : 
                          province.includes('Kivu') ? 1.5 : 1.0;
    
    const cases = Math.floor(baseCases * seasonalFactor * provinceFactor);
    const deaths = Math.floor(baseDeaths * seasonalFactor * provinceFactor * 0.8);
    const population = Math.floor(Math.random() * 50000) + 10000;
    
    return {
        Annees: year,
        Semaines: week,
        ZoneDeSante: zone,
        Pop: population,
        Province: province,
        DPS: dps,
        Cas: cases,
        Deces: deaths,
        createAt: new Date()
    };
}

// Fonction pour g√©n√©rer des donn√©es par batch
async function generateBatch(startYear, endYear, batchSize = 1000) {
    const batch = [];
    
    for (let year = startYear; year <= endYear; year++) {
        for (let week = 1; week <= 52; week++) {
            for (let i = 0; i < PROVINCES.length; i++) {
                const province = PROVINCES[i];
                const dps = DPS_LIST[i];
                const zone = ZONES_SANTE[i % ZONES_SANTE.length];
                
                batch.push(generateRandomData(year, week, province, dps, zone));
                
                // Ins√©rer par batch pour optimiser les performances
                if (batch.length >= batchSize) {
                    await Thematic.insertMany(batch, { ordered: false });
                    console.log(`‚úÖ Batch ins√©r√©: ${batch.length} enregistrements (${year}, semaine ${week})`);
                    batch.length = 0; // Vider le batch
                }
            }
        }
    }
    
    // Ins√©rer le dernier batch s'il reste des donn√©es
    if (batch.length > 0) {
        await Thematic.insertMany(batch, { ordered: false });
        console.log(`‚úÖ Dernier batch ins√©r√©: ${batch.length} enregistrements`);
    }
}

// Fonction principale pour g√©n√©rer les donn√©es
async function generateTestData() {
    try {
        console.log('Connexion √† MongoDB...');
        await mongoose.connect(mongoUri, {
            useNewUrlParser: true,
            useUnifiedTopology: true,
            maxPoolSize: 50
        });

        // V√©rifier si des donn√©es existent d√©j√†
        const existingCount = await Thematic.countDocuments({});
        if (existingCount > 0) {
            console.log(`‚ö†Ô∏è  Des donn√©es existent d√©j√† (${existingCount.toLocaleString()} enregistrements)`);
            const response = await askConfirmation('Voulez-vous continuer et ajouter plus de donn√©es ? (y/N)');
            if (!response) {
                console.log('G√©n√©ration annul√©e');
                return;
            }
        }

        console.log('\n=== G√âN√âRATION DE DONN√âES DE TEST ===');
        console.log('G√©n√©ration de donn√©es pour 2000-2025 (26 ann√©es)');
        console.log(`${PROVINCES.length} provinces √ó 52 semaines √ó 26 ann√©es = ${PROVINCES.length * 52 * 26} enregistrements potentiels\n`);

        const startTime = Date.now();
        
        // G√©n√©rer les donn√©es par p√©riode
        await generateBatch(2000, 2025, 5000);
        
        const endTime = Date.now();
        const totalTime = (endTime - startTime) / 1000;
        
        // Statistiques finales
        const finalCount = await Thematic.countDocuments({});
        const stats = await Thematic.collection.stats();
        
        console.log('\n=== R√âSUM√â DE LA G√âN√âRATION ===');
        console.log(`‚úÖ Enregistrements g√©n√©r√©s: ${finalCount.toLocaleString()}`);
        console.log(`‚è±Ô∏è  Temps total: ${totalTime.toFixed(2)} secondes`);
        console.log(`üöÄ Vitesse: ${(finalCount / totalTime).toFixed(0)} enregistrements/seconde`);
        console.log(`üíæ Taille des donn√©es: ${(stats.size / 1024 / 1024).toFixed(2)} MB`);
        console.log(`üíæ Taille du stockage: ${(stats.storageSize / 1024 / 1024).toFixed(2)} MB`);
        
        // Recommandations
        console.log('\n=== PROCHAINES √âTAPES ===');
        console.log('1. Ex√©cutez le script createIndexes.js pour optimiser les performances');
        console.log('2. Ex√©cutez le script performanceTest.js pour tester les performances');
        console.log('3. Utilisez les nouvelles routes API optimis√©es');

    } catch (error) {
        console.error('Erreur lors de la g√©n√©ration des donn√©es:', error);
    } finally {
        await mongoose.disconnect();
        console.log('\nD√©connexion de MongoDB');
    }
}

// Fonction utilitaire pour demander confirmation (simulation)
async function askConfirmation(question) {
    // En production, vous pourriez utiliser readline ou une autre m√©thode
    console.log(question);
    return true; // Pour l'exemple, on accepte automatiquement
}

// Ex√©cuter le script
if (require.main === module) {
    generateTestData();
}

module.exports = { generateTestData }; 